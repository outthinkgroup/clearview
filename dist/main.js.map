{"version":3,"sources":["scripts/subnav-animate.js","scripts/single-feature-sidebar.js","scripts/mobile-navigation.js","scripts/main.js","main.js"],"names":["initAnimateSubMenu","document","querySelector","headerBar","triggers","querySelectorAll","bgEl","createElement","classList","add","bgWrapper","appendChild","background","handleLeave","console","log","remove","removeAttribute","forEach","trigger","addEventListener","e","handleEnter","target","setTimeout","dropdown","headerBarCoords","getBoundingClientRect","setAttribute","dropdownCoords","bgNewCoords","width","height","top","left","style","setProperty","window","sidebarInit","maxWidth","matchMedia","pageWrapper","toggleBtns","toggleBtn","handleToggle","setInitialSidebarState","addListener","shouldHandleStickyState","sideBarState","newState","dataset","state","handleToggleArrow","windowWidth","matches","toggleState","btnTxt","innerHTML","mobileNavigationScript","mobileBtn","headContainer","setMobilMenuOpenState","contains"],"mappings":"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","file":"main.js","sourceRoot":"..","sourcesContent":["function initAnimateSubMenu() {\n  //test if there is a sub menu if not returns\n  const subnav = document.querySelector(\".sub-menu\");\n  if (!subnav) {\n    return null;\n  }\n\n  //vars\n\n  //creates the animating bg\n  const headerBar = document.querySelector(\"#site-navigation\");\n  const triggers = document.querySelectorAll(\".main-header-menu > .menu-item\");\n  const bgEl = document.createElement(\"div\");\n  bgEl.classList.add(\"animate-sub-menu-bg\");\n  const bgWrapper = document.createElement(\"div\");\n  bgWrapper.classList.add(\"bg-root\");\n\n  headerBar.appendChild(bgWrapper);\n  bgWrapper.appendChild(bgEl);\n\n  const background = bgEl; // easier to recognize\n\n  //when mouse enters trigger\n  function handleEnter(e) {\n    //need to override wp style for their dropdown\n    e.target.classList.add(\"trigger-enter\");\n    //console.log(e.target.classList);\n    setTimeout(() => e.target.classList.add(\"trigger-enter-active\"), 150);\n    //console.log(document.querySelector(\".trigger-enter\"));\n    const dropdown = e.target.querySelector(\".sub-menu\");\n    const headerBarCoords = headerBar.getBoundingClientRect();\n    if (!dropdown) {\n      console.log(\"nope\");\n      return null;\n    }\n    bgWrapper.setAttribute(\"data-active\", true);\n    const dropdownCoords = dropdown.getBoundingClientRect();\n    const bgNewCoords = {\n      width: dropdownCoords.width,\n      height: dropdownCoords.height,\n      top: dropdownCoords.top - headerBarCoords.top,\n      left: dropdownCoords.left - headerBarCoords.left,\n    };\n\n    background.style.setProperty(\"width\", `${bgNewCoords.width}px`);\n    background.style.setProperty(\"height\", `${bgNewCoords.height}px`);\n    background.style.setProperty(\n      \"transform\",\n      `translate(${bgNewCoords.left}px, ${bgNewCoords.top}px)`\n    );\n  }\n  //when mouse leaves trigger\n  function handleLeave() {\n    console.log(\"leave\");\n    this.classList.remove(\".trigger-enter\");\n    this.classList.remove(\".trigger-enter-active\");\n    bgWrapper.removeAttribute(\"data-active\");\n  }\n  //listeners\n  [...triggers].forEach(trigger => {\n    //gives each menu item two events\n    trigger.addEventListener(\"mouseenter\", e => handleEnter(e));\n    trigger.addEventListener(\"mouseleave\", handleLeave);\n  });\n}\nwindow.addEventListener(\"load\", initAnimateSubMenu);\n","(function() {\n  function sidebarInit() {\n    //stops script from running if not on a fth SINGLE\n    if (!document.querySelector(\".feature-single__wrapper--sidebar\")) return;\n\n    //media Query some functions run or wont run based on window width\n    const maxWidth = window.matchMedia(\"(min-width: 762px)\");\n\n    //toggle open / close states\n    const pageWrapper = document.querySelector(\n      \".feature-single__wrapper--sidebar\"\n    );\n    const toggleBtns = document.querySelectorAll(\".toggle__button\");\n\n    /* const mobileToggleBtn = document.querySelector(\n    \".fth-single__mobile-toggle span\"\n  ); */\n    [...toggleBtns].forEach(toggleBtn =>\n      toggleBtn.addEventListener(\"click\", handleToggle)\n    );\n\n    /* mobileToggleBtn.addEventListener(\"click\", handleToggle); */\n    function handleToggle() {\n      console.log(\"object\");\n      const sideBarState = pageWrapper.dataset.state;\n      const newState = sideBarState === \"open\" ? \"close\" : \"open\";\n      pageWrapper.dataset.state = newState;\n      handleToggleArrow();\n    }\n    function setInitialSidebarState(windowWidth) {\n      const pageWrapper = document.querySelector(\n        \".feature-single__wrapper--sidebar\"\n      );\n      if (windowWidth.matches) {\n        pageWrapper.dataset.state = \"open\";\n        handleToggleArrow(); //sets arrow on load\n      } else {\n        pageWrapper.dataset.state = \"close\";\n        handleToggleArrow(); //sets arrow on load\n      }\n    }\n\n    setInitialSidebarState(maxWidth); //maxWidth is defined on line 3\n    maxWidth.addListener(setInitialSidebarState);\n\n    function handleToggleArrow() {\n      const toggleBtn = document.querySelector(\".toggle__arrow\");\n      console.log(toggleBtn);\n      const toggleState = document.querySelector(\n        \".feature-single__wrapper--sidebar\"\n      ).dataset.state;\n      const btnTxt = toggleState === \"open\" ? \"&larr;\" : \"&rarr;\";\n      toggleBtn.innerHTML = btnTxt;\n    }\n\n    function shouldHandleStickyState(windowWidth) {\n      if (windowWidth.matches) {\n        //handleStickyState();\n      } else {\n        return;\n      }\n    }\n    shouldHandleStickyState(maxWidth);\n    maxWidth.addListener(shouldHandleStickyState);\n\n    /* this adds a css variable that centers the content when\n      data-state is closed on the fth-single\n      \n      ? this should probably be rethought ?\n      */\n    /* function contentMove() {\n    const content = document.querySelector(\".fth-single__content\");\n    const pageWidth = Math.max(\n      document.querySelector(\".feature-single-page\").getBoundingClientRect()\n        .width\n    );\n    const sidebarWidth = document\n      .querySelector(\".feature-single__sidebar\")\n      .getBoundingClientRect().width;\n    const diff = pageWidth - (pageWidth - sidebarWidth);\n    const move = Math.floor(diff / 2);\n    content.style.setProperty(\"--contentMove\", `-${move}px`);\n  }\n  function contentMoveGrouped() {\n    contentMove();\n    window.addEventListener(\"resize\", contentMove);\n  } */\n    //above function shouldnt run if mobile\n    /* function shouldContentMove(windowWidth) {\n    if (windowWidth.matches) {\n      contentMoveGrouped();\n    } else {\n      return;\n    }\n  } */\n    //shouldContentMove(maxWidth); //maxWidth is defined on line 3\n    //maxWidth.addListener(shouldContentMove); //listens to window width\n\n    /* this will set the chapter menu to closed by default */\n\n    /* */\n  }\n  window.addEventListener(\"load\", sidebarInit);\n})();\n","/*\nthis gives a data attribute to the  header container.  allowing us to set styles based on whether or not the navigation is open or closed.\n */\n\nwindow.addEventListener(\"load\", mobileNavigationScript);\nfunction mobileNavigationScript() {\n  const mobileBtn = document.querySelector(\".menu-toggle\");\n  const headContainer = document.querySelector(\".main-header-container\");\n  headContainer.setAttribute(\"data-mobile-menu\", \"closed\");\n\n  mobileBtn.addEventListener(\"click\", setMobilMenuOpenState);\n  function setMobilMenuOpenState() {\n    const state = this.classList.contains(\"toggled\") ? \"open\" : \"closed\";\n    console.log(\"headContainer\", headContainer);\n    headContainer.setAttribute(\"data-mobile-menu\", state);\n  }\n}\n","import \"./subnav-animate\";\nimport \"./single-feature-sidebar\";\nimport \"./mobile-navigation\";\n","/* this is for parcel */\nimport \"./styles/main.scss\";\nimport \"./scripts/main.js\";\n"]}